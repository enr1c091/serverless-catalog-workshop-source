<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Structuring a Serverless application on AWS Serverless Catalog Workshop</title>
    <link>/en/010_introduction/011_architecture/</link>
    <description>Recent content in Structuring a Serverless application on AWS Serverless Catalog Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="/en/010_introduction/011_architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS Serverless Application Model (SAM)</title>
      <link>/en/010_introduction/011_architecture/sam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/010_introduction/011_architecture/sam/</guid>
      <description>The AWS Serverless Application Model (SAM) is an open-source framework for building serverless applications. It provides shorthand syntax to express functions, APIs, databases, and event source mappings. With just a few lines per resource, you can define the application you want and model it using YAML. During deployment, SAM transforms and expands the SAM syntax into AWS CloudFormation syntax, enabling you to build serverless applications faster.
To get started with building SAM-based applications, use the AWS SAM CLI and the SAM Template Specification.</description>
    </item>
    
    <item>
      <title>Serverless application structure</title>
      <link>/en/010_introduction/011_architecture/application-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/010_introduction/011_architecture/application-structure/</guid>
      <description>When creating our sample application, we are going to deploy an application containing the following resources:
Even though there&#39;s no single source of thruth, a good rule of thumb to follow when structuring your serverless applications using SAM can be adopting the following structure:
content ├── __tests__ &amp;lt;-- Parent folder for all tests │ ├── unit &amp;lt;-- Parent folder for all unit tests │ │ ├── items &amp;lt;-- Parent folder for tests of a logical context │ │ │ └── put-item.</description>
    </item>
    
  </channel>
</rss>