<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS Serverless Catalog Workshop</title>
    <link>/en/</link>
    <description>Recent content on AWS Serverless Catalog Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="/en/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create an AWS account</title>
      <link>/en/020_prerequisites/self_paced/account/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/020_prerequisites/self_paced/account/</guid>
      <description>Your account must have the ability to create new IAM roles and scope other IAM permissions.
   If you don&#39;t already have an AWS account with Administrator access: create one now by clicking here
  Once you have an AWS account, ensure you are following the remaining workshop steps as an IAM user with administrator access to the AWS account: Create a new IAM user to use for the workshop</description>
    </item>
    
    <item>
      <title>Prerequisites</title>
      <link>/en/020_prerequisites/workspace/prereqs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/020_prerequisites/workspace/prereqs/</guid>
      <description>The following prerequisites are required for this workshops:
 A computer with an internet connection running Microsoft Windows, Mac OS X, or Linux. An internet browser such as Chrome, Firefox, Safari, Opera, or Edge. Familiarity with common Linux commands and the concepts of CI/CD.  This workshop includes multiple code samples that you can copy and paste using the button shown below.</description>
    </item>
    
    <item>
      <title>Create a Workspace</title>
      <link>/en/020_prerequisites/workspace/workspace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/020_prerequisites/workspace/workspace/</guid>
      <description>The Cloud9 workspace should be built by an IAM user with Administrator privileges, not the root account user. Please ensure you are logged in as an IAM user, not the root account user.
 Ad blockers, javascript disablers, and tracking blockers should be disabled for the cloud9 domain, or connecting to the workspace might be impacted. Cloud9 requires third-party-cookies. You can whitelist the specific domains.
 Launch Cloud9 in your closest region:  N.</description>
    </item>
    
    <item>
      <title>Create an IAM role for your Workspace</title>
      <link>/en/020_prerequisites/workspace/iamrole/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/020_prerequisites/workspace/iamrole/</guid>
      <description> Follow this deep link to create an IAM role with Administrator access. Confirm that AWS service and EC2 are selected, then click Next to view permissions. Confirm that AdministratorAccess is checked, then click Next: Tags to assign tags. Take the defaults, and click Next: Review to review. Enter serverless-catalog-workshop-admin for the Name, and click Create role.   </description>
    </item>
    
    <item>
      <title>Attach the IAM role to your Workspace</title>
      <link>/en/020_prerequisites/workspace/ec2instance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/020_prerequisites/workspace/ec2instance/</guid>
      <description> Follow this deep link to find your Cloud9 EC2 instance Select the instance, then choose Actions / Instance Settings / Attach/Replace IAM Role  Choose serverless-catalog-workshop-admin from the IAM Role drop down, and select Apply   </description>
    </item>
    
    <item>
      <title>Update IAM settings for your Workspace</title>
      <link>/en/020_prerequisites/workspace/workspaceiam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/020_prerequisites/workspace/workspaceiam/</guid>
      <description>Cloud9 normally manages IAM credentials dynamically. For this workshop we will disable it and rely on the IAM role instead.
  Return to your workspace and click the gear icon (in top right corner), or click to open a new tab and choose &amp;ldquo;Open Preferences&amp;rdquo; Select AWS SETTINGS Turn off AWS managed temporary credentials Close the Preferences tab   To ensure temporary credentials aren&#39;t already in place we will also remove any existing credentials file:</description>
    </item>
    
    <item>
      <title>AWS Workshop Portal</title>
      <link>/en/020_prerequisites/aws_event/portal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/020_prerequisites/aws_event/portal/</guid>
      <description>Login to AWS Workshop Portal This workshop creates an AWS acccount and a Cloud9 environment. You will need the Participant Hash provided upon entry, and your email address to track your unique session.
Connect to the portal by clicking the button or browsing to https://dashboard.eventengine.run/. The following screen shows up.
Enter the provided hash in the text box. The button on the bottom right corner changes to Accept Terms &amp;amp; Login.</description>
    </item>
    
    <item>
      <title>Creating a serverless application</title>
      <link>/en/030_application/sam-init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/030_application/sam-init/</guid>
      <description>This sample application will be built using Node.js and this structure tree might differ for other languages.
 Creating an application using sam init By using AWS SAM CLI, you can quickly create serverless applications using the command sam init with different levels of customization and boilerplates to get started.
Go to your Terminal session in your Cloud9 environment and create your first application.
sam init -n sample-app -r nodejs12.</description>
    </item>
    
    <item>
      <title>Exploring the Hello World app</title>
      <link>/en/030_application/explore-sam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/030_application/explore-sam/</guid>
      <description>Hello World App Structure To better understand what has been created and how these pieces glue together, let&#39;s analyze whats each file of our sample app doing:
sample-app ├── events &amp;lt;-- Folder for mock event payloads │ ├── event.json &amp;lt;-- Mock payload for local/unit testing ├── hello-world &amp;lt;-- source code of our function │ ├── tests &amp;lt;-- Parent folder for all tests │ │ ├── unit &amp;lt;-- Parent folder for all unit tests │ │ │ ├── test-handler.</description>
    </item>
    
    <item>
      <title>Deleting the Sample App</title>
      <link>/en/030_application/delete-sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/030_application/delete-sample/</guid>
      <description>Now that we have it clear that we are not satisfied with the default structure, delete the app you create and let&#39;s rebuilt applying some best practices.
cd ~/environment/ rm -rf sample-app/ </description>
    </item>
    
    <item>
      <title>Cloning the Service Repo</title>
      <link>/en/030_application/clone-repo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/030_application/clone-repo/</guid>
      <description>cd ~/environment git clone https://github.com/enr1c091/nodejs-sam-backend-demo.git This repo brings us the following proposed structure for our backend application:
nodejs-sam-backend-demo ├── __tests__ &amp;lt;-- Parent folder for all tests │ ├── unit &amp;lt;-- Parent folder for all unit tests │ │ ├── items &amp;lt;-- Parent folder for tests of a logical context │ │ │ └── put-item.test.js &amp;lt;-- put-item service unit tests │ │ │ └── get-all-items.test.js &amp;lt;-- get-all-items service unit tests │ │ │ ├── src &amp;lt;-- source code of our microservices │ ├── items &amp;lt;-- Parent folder for a logical context │ │ ├── get-all-items &amp;lt;-- Parent folder for a single lambda function │ │ │ ├── event.</description>
    </item>
    
    <item>
      <title>Deploying the Backend Service</title>
      <link>/en/030_application/sam-deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/030_application/sam-deploy/</guid>
      <description>After we deploy this application, the following resources will be provisioned in our AWS account:
Deploying your application cd ~/environment/nodejs-sam-backend-demo/ sam deploy -g Enter the following settings when prompted:
Setting default arguments for &amp;#39;sam deploy&amp;#39; ========================================= Stack Name [sam-app]: AWS Region [us-east-1]: Parameter ProjectName []: backend-demo Parameter Stage []: Dev #Shows you resources changes to be deployed and require a &amp;#39;Y&amp;#39; to initiate deploy Confirm changes before deploy [y/N]: Y #SAM needs permission to be able to create roles to connect to the resources in your template Allow SAM CLI IAM role creation [Y/n]: Y Save arguments to samconfig.</description>
    </item>
    
    <item>
      <title>Testing the APIs</title>
      <link>/en/030_application/testing-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/030_application/testing-app/</guid>
      <description>Export the stack output variables To invoke our API&#39;s, we first need to fetch the ApiUrl output variable that our CloudFormation stack gives us. So let us iterate through our stack and export all output variables as environment variables:
stack_info=$(aws cloudformation describe-stacks --stack-name sam-app --output json) if [[ &amp;#34;$stack_info&amp;#34; =~ &amp;#34;OutputKey&amp;#34; ]]; then read -r -a output_keys &amp;lt;&amp;lt;&amp;lt; $(echo &amp;#34;$stack_info&amp;#34; | jq &amp;#34;.Stacks[].Outputs[].OutputKey&amp;#34;) read -r -a output_vals &amp;lt;&amp;lt;&amp;lt; $(echo &amp;#34;$stack_info&amp;#34; | jq &amp;#34;.</description>
    </item>
    
    <item>
      <title>Create a CodeCommit Repository</title>
      <link>/en/040_pipeline/create-repo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/create-repo/</guid>
      <description>Click this deep link to access your AWS CodeCommit console
 Click Create repository Name it serverless-repo, click Create  </description>
    </item>
    
    <item>
      <title>Configure IAM Roles &amp; Permissions</title>
      <link>/en/040_pipeline/iam-permission/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/iam-permission/</guid>
      <description>Create Service Rules First of all, we need to create AWS Identity and Access Management (IAM) Service Roles for AWS CodeBuild, AWS CodePipeline and AWS CloudFormation granting access provision and operate the resources we need to execute our CI/CD pipeline.
Switch back to your Cloud9 environoment and open a terminal tab.
Create role for AWS CodeBuild:
cd ~/environment TRUST=&amp;#34;{ \&amp;#34;Version\&amp;#34;: \&amp;#34;2012-10-17\&amp;#34;, \&amp;#34;Statement\&amp;#34;: [ { \&amp;#34;Effect\&amp;#34;: \&amp;#34;Allow\&amp;#34;, \&amp;#34;Principal\&amp;#34;: { \&amp;#34;Service\&amp;#34;: \&amp;#34;codebuild.amazonaws.com\&amp;#34; }, \&amp;#34;Action\&amp;#34;: \&amp;#34;sts:AssumeRole\&amp;#34; } ] }&amp;#34; echo &amp;#39;{ &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;, &amp;#34;Statement&amp;#34;: [ { &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;, &amp;#34;Action&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;Resource&amp;#34;: &amp;#34;*&amp;#34; } ] }&amp;#39; &amp;gt; /tmp/iam-role-policy aws iam create-role --role-name serverless-catalog-wksp-build-role --assume-role-policy-document &amp;#34;$TRUST&amp;#34; --output text --query &amp;#39;Role.</description>
    </item>
    
    <item>
      <title>Generate CodeCommit Credentials</title>
      <link>/en/040_pipeline/git-credentials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/git-credentials/</guid>
      <description>Go to your IAM Console.
 Click Users. Click on your current user. Click on Security credentials tab. Scroll down to the HTTPS Git credentials for AWS CodeCommit section. Click on Generate credentials.  Make sure to copy/paste both User name and password to a notepad and Download the .csv in case you lose the pasted data.
You will need these credentials to complete this module. If you lose them you will have to generate a second pair of credentials.</description>
    </item>
    
    <item>
      <title>Upload Code to Repository</title>
      <link>/en/040_pipeline/upload-code-git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/upload-code-git/</guid>
      <description>Now that we have our CodeCommit permissions and credentials properly configured, let&#39;s upload our sample application code to our repository.
Switch back to your Cloud9 environoment and open a terminal tab.
cd ~/environment/ git clone https://git-codecommit.${AWS_REGION}.amazonaws.com/v1/repos/serverless-repo rsync -a --exclude=&amp;#39;.*&amp;#39; nodejs-sam-backend-demo/ serverless-repo/ cd serverless-repo/ Upload the code to the AWS CodeCommit Repository.
git add . git commit -m &amp;#34;Initial Commit&amp;#34; git push If you are prompted to enter an username and password, enter the ones in the credentials we generated in the previous step.</description>
    </item>
    
    <item>
      <title>Create a S3 Bucket for Build Artifacts</title>
      <link>/en/040_pipeline/create-s3-bucket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/create-s3-bucket/</guid>
      <description>AWS CodeBuild and AWS CodePipeline require a S3 bucket to store artifacts that are generated during build stages.
aws s3 mb s3://aws-serverless-catalog-wksp-build-&amp;lt;FIRSTNAME-LASTNAME&amp;gt; </description>
    </item>
    
    <item>
      <title>Multi-Environment Pipeline Setup</title>
      <link>/en/040_pipeline/create-pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/create-pipeline/</guid>
      <description>Open your AWS CodePipeline console.
 Click Create pipeline Name it serverless-pipeline Select Existing service role Browse for service-catalog-wksp-pipeline-role, click Next   Select AWS CodeCommit as Source provider Select serverless-repo as Repository name Select master as Branch name Leave the last option as default and click Next   Select AWS CodeBuild as Build provider Select your current region Click Create project to configure your CodeBuild project. A pop-up will open.</description>
    </item>
    
    <item>
      <title>Configure Additional Build Actions</title>
      <link>/en/040_pipeline/create-build-actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/create-build-actions/</guid>
      <description>Open your recently created pipeline.
 Click Edit   In the Build section click Edit stage Click Add action group below the current Build action to configure a new AWS CodeBuild action.   Name it Unit Test Select AWS CodeBuild as Build provider Select your current region Select SourceArtifact as Input artifacts Click Create project to configure your CodeBuild project. A pop-up will open.   Name it serverless-test-project In the Environment section select Managed image as Environment image Select Amazon Linux 2 as Operating system Select Standard as Runtime(s) Select aws/codebuild/amazonlinux2-x86-64-standard:2.</description>
    </item>
    
    <item>
      <title>Configure Deploy Actions</title>
      <link>/en/040_pipeline/create-deploy-actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/create-deploy-actions/</guid>
      <description>Adding a Development Deployment Stage  Click Add stage below the Build section we just edited.   Name it Dev, click Add stage Click Add action group Name it CreateChangeSet, click Add stage Select AWS CloudFormation as Action provider Select your current region Select BuildArtifact as Input artifacts Select Create or replace a change set as Action mode Type serverless-service-Dev as Stack name Type serverless-service-ChangeSet-Dev as Change set name Select BuildArtifact as Artifact name Select packaged.</description>
    </item>
    
    <item>
      <title>Trigger New Release</title>
      <link>/en/040_pipeline/trigger-new-release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/trigger-new-release/</guid>
      <description>Update Our Application So far we have walked through setting up a multi-environment CI/CD for our serverless application using AWS CodePipeline and now we are going to make a change to the AWS CodeCommit repository so that we can see a new release built and delivered.
Open your Cloud9 environment and go to your serverless-repo directory.
Navigate to /src/items/get-all-items/index.js file. Change the the code in this line:
const response = { statusCode: 200, body: JSON.</description>
    </item>
    
    <item>
      <title>Cleanup</title>
      <link>/en/040_pipeline/cleanup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/cleanup/</guid>
      <description>Delete the stacks for each environment created for our application aws cloudformation delete-stack --stack-name serverless-service-Dev aws cloudformation delete-stack --stack-name serverless-service-Prod Delete the code repository aws codecommit delete-repository --repository-name serverless-repo Delete the build projects aws codebuild delete-project --name serverless-build-project aws codebuild delete-project --name serverless-test-project Delete the pipeline aws codepipeline delete-pipeline --name serverless-pipeline Empty and delete the S3 bucket for build artifacts aws s3 rm s3://aws-serverless-catalog-wksp-build-&amp;lt;FIRSTNAME-LASTNAME&amp;gt; --recursive aws s3 rb s3://aws-serverless-catalog-wksp-build-&amp;lt;FIRSTNAME-LASTNAME&amp;gt; --force Delete the IAM Roles aws iam delete-role --name </description>
    </item>
    
    <item>
      <title>AWS Service Catalog</title>
      <link>/en/050_catalog/service-catalog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/050_catalog/service-catalog/</guid>
      <description>AWS Service Catalog allows organizations to create and manage catalogs of IT services that are approved for use on AWS. These IT services can include everything from virtual machine images, servers, software, and databases to complete multi-tier application architectures. AWS Service Catalog allows you to centrally manage commonly deployed IT services, and helps you achieve consistent governance and meet your compliance requirements, while enabling users to quickly deploy only the approved IT services they need.</description>
    </item>
    
    <item>
      <title>Packaging the Node.js Application</title>
      <link>/en/050_catalog/package-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/050_catalog/package-app/</guid>
      <description>Since we want every new serverless project to be as a boilerplate, The first thing we have to do is to package our application into a ZIP file and upload it to a S3 bucket which used as source for every new AWS CodeCommit repository created.
Package the application cd ~/environment/nodejs-sam-backend-demo zip -r ~/environment/sample.zip * Create an unique S3 bucket Create a S3 bucket choosing an unique name for your bucket.</description>
    </item>
    
    <item>
      <title>Creating a Pipeline CloudFormation Template</title>
      <link>/en/050_catalog/cf-template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/050_catalog/cf-template/</guid>
      <description>Download the template file mkdir ~/environment/cf-template cd ~/environment/cf-template sudo curl --location -o ./template.yaml https://raw.githubusercontent.com/enr1c091/serverless-catalog-workshop/master/template.yaml  Spare a few minutes to go through the CloudFormation template and understand how resources are being created based on the given parameters.
 Take a look at the template.yaml file downloaded. These are the main parameters we are going to use:
   Parameter Description     ProjectName Project name   RepositoryName CodeCommit Repository name   RepositoryDescription CodeCommit Repository description   CodeS3Bucket Bucket name and path where our bundled code resides e.</description>
    </item>
    
    <item>
      <title>Creating a Service Catalog Product</title>
      <link>/en/050_catalog/catalog-create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/050_catalog/catalog-create/</guid>
      <description>Make sure you have the URL of your template file with you. e.g. https://serverless-wksp-sample-your-name.s3.amazonaws.com/service-catalog/template.yaml
 Create a Service Catalog Portfolio Click this deep link to access your AWS Service Catalog console
 Under Administration select Portifolios Click Create portifolio Name it Projects with CI/CD Pipeline and type the Owner name, click Create. Click on your newly created portifolio.   Upload a new Product  Click Upload new product Name it Serverless Project and type the Owner name.</description>
    </item>
    
    <item>
      <title>Granting Access to Users Launch the Product</title>
      <link>/en/050_catalog/catalog-access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/050_catalog/catalog-access/</guid>
      <description>  Click Group, roles and users (0)
  Click Add groups, roles, users   Click Users and check the box in front of your user.
  Click Add access.   </description>
    </item>
    
    <item>
      <title>Launching a Serverless Project</title>
      <link>/en/050_catalog/catalog-launch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/050_catalog/catalog-launch/</guid>
      <description>Click Product list
  Click the three dots in front of your Product, click Launch.   Name it demo-service and click Next.
  Name it demo-service.
  Type demo-service for ProjectName.
  Type demo-service-repo for RepositoryName.
  Type Repository for our demo service for ProjectName.
  Type YOUR-BUCKET-NAME/sam/nodejs for CodeS3Bucket and click Next.
  Accept all defaults by clicking Next</description>
    </item>
    
    <item>
      <title>Testing the APIs</title>
      <link>/en/050_catalog/testing-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/050_catalog/testing-app/</guid>
      <description>Go back to your Cloud9 environment and open a terminal tab.
Development Environment Testing Export the Dev stack output variables To invoke our API&#39;s, we first need to fetch the ApiUrl output variable that our CloudFormation Development stack gives us. So let us iterate through our stack and export all output variables as environment variables.
stack_info=$(aws cloudformation describe-stacks --stack-name demo-service-Dev --output json) if [[ &amp;#34;$stack_info&amp;#34; =~ &amp;#34;OutputKey&amp;#34; ]]; then read -r -a output_keys &amp;lt;&amp;lt;&amp;lt; $(echo &amp;#34;$stack_info&amp;#34; | jq &amp;#34;.</description>
    </item>
    
    <item>
      <title>What Have We Accomplished</title>
      <link>/en/060_conclusion/steps-done/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/060_conclusion/steps-done/</guid>
      <description>We have:
 Structured a Node.js serverless application code following best practices. Deployed an application consisting of serverless microservices using AWS SAM. Created a multi-environment CI/CD Pipeline for serverless applications. Deployed our Code and Pipeline as a reusable asset across an entire organization.  </description>
    </item>
    
    <item>
      <title>Let us know what you think!</title>
      <link>/en/060_conclusion/feedback/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/060_conclusion/feedback/</guid>
      <description>Please take our survey!</description>
    </item>
    
    <item>
      <title>Remove the Environment Stacks</title>
      <link>/en/070_cleanup/stacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/070_cleanup/stacks/</guid>
      <description>Delete the stacks for each environment created for our application aws cloudformation delete-stack --stack-name demo-service-Dev aws cloudformation delete-stack --stack-name demo-service-Staging aws cloudformation delete-stack --stack-name demo-service-Prod Make sure to refresh until your stacks are deleted to move forward </description>
    </item>
    
    <item>
      <title>Delete the S3 Bucket</title>
      <link>/en/070_cleanup/s3bucket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/070_cleanup/s3bucket/</guid>
      <description>Empty the S3 Bucket aws s3 rm s3://serverless-wksp-sample-&amp;lt;your-name&amp;gt; --recursive Delete the S3 Bucket aws s3 rb s3://serverless-wksp-sample-&amp;lt;your-name&amp;gt; --force </description>
    </item>
    
    <item>
      <title>Undeploy the Service Catalog</title>
      <link>/en/070_cleanup/service-catalog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/070_cleanup/service-catalog/</guid>
      <description>Let us now terminate the provisioned product in Service Catalog as well as deleting both the product and portifolio we created.
Empty the Build Artifact S3 Bucket Go to your AWS CloudFormation and search for the stack Service Catalog created starting with the SC- prefix. Go to Outputs and take note of the ArtifactBucket S3 Bucket name. aws s3 rm s3://&amp;lt;YOUR-ARTIFACT-BUCKET-NAME&amp;gt; --recursive Terminate provisioned product aws servicecatalog terminate-provisioned-product --provisioned-product-name demo-service Go to your Service Catalog console in Provisioned Products and wait until the termination is complete to move forward Remove product association from the portifolio  Go to Portifolios.</description>
    </item>
    
    <item>
      <title>Delete the CodeCommit Repositories</title>
      <link>/en/070_cleanup/commit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/070_cleanup/commit/</guid>
      <description>aws codecommit delete-repository --repository-name demo-service-repo </description>
    </item>
    
    <item>
      <title>Cleanup the Workspace</title>
      <link>/en/070_cleanup/workspace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/070_cleanup/workspace/</guid>
      <description>Since we no longer need the Cloud9 instance to have Administrator access to our account, we can delete the workspace we created:
 Go to your Cloud9 Environment. Select the environment named serverless-catalog-workshop and pick delete.  </description>
    </item>
    
    <item>
      <title>AWS Serverless Application Model (SAM)</title>
      <link>/en/010_introduction/011_architecture/sam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/010_introduction/011_architecture/sam/</guid>
      <description>The AWS Serverless Application Model (SAM) is an open-source framework for building serverless applications. It provides shorthand syntax to express functions, APIs, databases, and event source mappings. With just a few lines per resource, you can define the application you want and model it using YAML. During deployment, SAM transforms and expands the SAM syntax into AWS CloudFormation syntax, enabling you to build serverless applications faster.
To get started with building SAM-based applications, use the AWS SAM CLI and the SAM Template Specification.</description>
    </item>
    
    <item>
      <title>Serverless application structure</title>
      <link>/en/010_introduction/011_architecture/application-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/010_introduction/011_architecture/application-structure/</guid>
      <description>When creating our sample application, we are going to deploy an application containing the following resources:
Even though there&#39;s no single source of thruth, a good rule of thumb to follow when structuring your serverless applications using SAM can be adopting the following structure:
content ├── __tests__ &amp;lt;-- Parent folder for all tests │ ├── unit &amp;lt;-- Parent folder for all unit tests │ │ ├── items &amp;lt;-- Parent folder for tests of a logical context │ │ │ └── put-item.</description>
    </item>
    
    <item>
      <title>Credits</title>
      <link>/en/authors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/authors/</guid>
      <description>Main Author(s) The AWS Serverless Cataloog Workshop website has been developed by:
 Enrico Bergamo - Labs, content, website &amp;amp; format  Additional Author(s)  Luiz Yanai - Content &amp;amp; tech review, and labs  Other Contributor(s) This website is the result of many reviews and contributions.
Technical Reviewer(s)  Gustavo Rozatti Claudia Charro Natalia Girolamo  Translator(s)  Enrico Bergamo (PT) Luiz Yanai (PT)  GitHub Contributor(s)  </description>
    </item>
    
    <item>
      <title>Ireland</title>
      <link>/en/020_prerequisites/workspace/eu-west-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/020_prerequisites/workspace/eu-west-1/</guid>
      <description>Create a Cloud9 Environment: https://eu-west-1.console.aws.amazon.com/cloud9/home?region=eu-west-1</description>
    </item>
    
    <item>
      <title>More Resources</title>
      <link>/en/more_resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/more_resources/</guid>
      <description>Discover more AWS resources for building and running your application on AWS:
More Workshops  Amazon ECS Workshop - Learn how to use Stelligent Mu to deploy a microservice architecture that runs in AWS Fargate Amazon Lightsail Workshop - If you are getting started with the cloud and looking for a way to run an extremely low cost environment Lightsail is perfect. Learn how to deploy to Amazon Lightsail with this workshop.</description>
    </item>
    
    <item>
      <title>N. Virginia</title>
      <link>/en/020_prerequisites/workspace/us-east-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/020_prerequisites/workspace/us-east-1/</guid>
      <description>Create a Cloud9 Environment: https://us-east-1.console.aws.amazon.com/cloud9/home?region=us-east-1</description>
    </item>
    
    <item>
      <title>Ohio</title>
      <link>/en/020_prerequisites/workspace/us-east-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/020_prerequisites/workspace/us-east-2/</guid>
      <description>Create a Cloud9 Environment: https://us-east-2.console.aws.amazon.com/cloud9/home?region=us-east-2</description>
    </item>
    
    <item>
      <title>Oregon</title>
      <link>/en/020_prerequisites/workspace/us-west-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/020_prerequisites/workspace/us-west-2/</guid>
      <description>Create a Cloud9 Environment: https://us-west-2.console.aws.amazon.com/cloud9/home?region=us-west-2</description>
    </item>
    
    <item>
      <title>Singapore</title>
      <link>/en/020_prerequisites/workspace/ap-southeast-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/020_prerequisites/workspace/ap-southeast-1/</guid>
      <description>Create a Cloud9 Environment: https://ap-southeast-1.console.aws.amazon.com/cloud9/home?region=ap-southeast-1</description>
    </item>
    
  </channel>
</rss>