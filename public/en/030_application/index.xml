<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sample Application Structure on AWS Serverless Catalog Workshop</title>
    <link>/en/030_application/</link>
    <description>Recent content in Sample Application Structure on AWS Serverless Catalog Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="/en/030_application/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating a serverless application</title>
      <link>/en/030_application/sam-init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/030_application/sam-init/</guid>
      <description>This sample application will be built using Node.js and this structure tree might differ for other languages.
 Creating an application using sam init By using AWS SAM CLI, you can quickly create serverless applications using the command sam init with different levels of customization and boilerplates to get started.
Go to your Terminal session in your Cloud9 environment and create your first application.
sam init -n sample-app -r nodejs12.</description>
    </item>
    
    <item>
      <title>Exploring the Hello World app</title>
      <link>/en/030_application/explore-sam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/030_application/explore-sam/</guid>
      <description>Hello World App Structure To better understand what has been created and how these pieces glue together, let&#39;s analyze whats each file of our sample app doing:
sample-app ├── events &amp;lt;-- Folder for mock event payloads │ ├── event.json &amp;lt;-- Mock payload for local/unit testing ├── hello-world &amp;lt;-- source code of our function │ ├── tests &amp;lt;-- Parent folder for all tests │ │ ├── unit &amp;lt;-- Parent folder for all unit tests │ │ │ ├── test-handler.</description>
    </item>
    
    <item>
      <title>Deleting the Sample App</title>
      <link>/en/030_application/delete-sample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/030_application/delete-sample/</guid>
      <description>Now that we have it clear that we are not satisfied with the default structure, delete the app you create and let&#39;s rebuilt applying some best practices.
cd ~/environment/ rm -rf sample-app/ </description>
    </item>
    
    <item>
      <title>Cloning the Service Repo</title>
      <link>/en/030_application/clone-repo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/030_application/clone-repo/</guid>
      <description>cd ~/environment git clone https://github.com/enr1c091/nodejs-sam-backend-demo.git This repo brings us the following proposed structure for our backend application:
nodejs-sam-backend-demo ├── __tests__ &amp;lt;-- Parent folder for all tests │ ├── unit &amp;lt;-- Parent folder for all unit tests │ │ ├── items &amp;lt;-- Parent folder for tests of a logical context │ │ │ └── put-item.test.js &amp;lt;-- put-item service unit tests │ │ │ └── get-all-items.test.js &amp;lt;-- get-all-items service unit tests │ │ │ ├── src &amp;lt;-- source code of our microservices │ ├── items &amp;lt;-- Parent folder for a logical context │ │ ├── get-all-items &amp;lt;-- Parent folder for a single lambda function │ │ │ ├── event.</description>
    </item>
    
    <item>
      <title>Deploying the Backend Service</title>
      <link>/en/030_application/sam-deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/030_application/sam-deploy/</guid>
      <description>After we deploy this application, the following resources will be provisioned in our AWS account:
Deploying your application cd ~/environment/nodejs-sam-backend-demo/ sam deploy -g Enter the following settings when prompted:
Setting default arguments for &amp;#39;sam deploy&amp;#39; ========================================= Stack Name [sam-app]: AWS Region [us-east-1]: Parameter ProjectName []: backend-demo Parameter Stage []: Dev #Shows you resources changes to be deployed and require a &amp;#39;Y&amp;#39; to initiate deploy Confirm changes before deploy [y/N]: Y #SAM needs permission to be able to create roles to connect to the resources in your template Allow SAM CLI IAM role creation [Y/n]: Y Save arguments to samconfig.</description>
    </item>
    
    <item>
      <title>Testing the APIs</title>
      <link>/en/030_application/testing-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/030_application/testing-app/</guid>
      <description>Export the stack output variables To invoke our API&#39;s, we first need to fetch the ApiUrl output variable that our CloudFormation stack gives us. So let us iterate through our stack and export all output variables as environment variables:
stack_info=$(aws cloudformation describe-stacks --stack-name sam-app --output json) if [[ &amp;#34;$stack_info&amp;#34; =~ &amp;#34;OutputKey&amp;#34; ]]; then read -r -a output_keys &amp;lt;&amp;lt;&amp;lt; $(echo &amp;#34;$stack_info&amp;#34; | jq &amp;#34;.Stacks[].Outputs[].OutputKey&amp;#34;) read -r -a output_vals &amp;lt;&amp;lt;&amp;lt; $(echo &amp;#34;$stack_info&amp;#34; | jq &amp;#34;.</description>
    </item>
    
  </channel>
</rss>