<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Create the CI/CD Pipeline on AWS Serverless Catalog Workshop</title>
    <link>/en/040_pipeline/</link>
    <description>Recent content in Create the CI/CD Pipeline on AWS Serverless Catalog Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="/en/040_pipeline/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create a CodeCommit Repository</title>
      <link>/en/040_pipeline/create-repo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/create-repo/</guid>
      <description>Click this deep link to access your AWS CodeCommit console
 Click Create repository Name it serverless-repo, click Create  </description>
    </item>
    
    <item>
      <title>Configure IAM Roles &amp; Permissions</title>
      <link>/en/040_pipeline/iam-permission/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/iam-permission/</guid>
      <description>Create Service Rules First of all, we need to create AWS Identity and Access Management (IAM) Service Roles for AWS CodeBuild, AWS CodePipeline and AWS CloudFormation granting access provision and operate the resources we need to execute our CI/CD pipeline.
Switch back to your Cloud9 environoment and open a terminal tab.
Create role for AWS CodeBuild:
cd ~/environment TRUST=&amp;#34;{ \&amp;#34;Version\&amp;#34;: \&amp;#34;2012-10-17\&amp;#34;, \&amp;#34;Statement\&amp;#34;: [ { \&amp;#34;Effect\&amp;#34;: \&amp;#34;Allow\&amp;#34;, \&amp;#34;Principal\&amp;#34;: { \&amp;#34;Service\&amp;#34;: \&amp;#34;codebuild.amazonaws.com\&amp;#34; }, \&amp;#34;Action\&amp;#34;: \&amp;#34;sts:AssumeRole\&amp;#34; } ] }&amp;#34; echo &amp;#39;{ &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;, &amp;#34;Statement&amp;#34;: [ { &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;, &amp;#34;Action&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;Resource&amp;#34;: &amp;#34;*&amp;#34; } ] }&amp;#39; &amp;gt; /tmp/iam-role-policy aws iam create-role --role-name serverless-catalog-wksp-build-role --assume-role-policy-document &amp;#34;$TRUST&amp;#34; --output text --query &amp;#39;Role.</description>
    </item>
    
    <item>
      <title>Generate CodeCommit Credentials</title>
      <link>/en/040_pipeline/git-credentials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/git-credentials/</guid>
      <description>Go to your IAM Console.
 Click Users. Click on your current user. Click on Security credentials tab. Scroll down to the HTTPS Git credentials for AWS CodeCommit section. Click on Generate credentials.  Make sure to copy/paste both User name and password to a notepad and Download the .csv in case you lose the pasted data.
You will need these credentials to complete this module. If you lose them you will have to generate a second pair of credentials.</description>
    </item>
    
    <item>
      <title>Upload Code to Repository</title>
      <link>/en/040_pipeline/upload-code-git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/upload-code-git/</guid>
      <description>Now that we have our CodeCommit permissions and credentials properly configured, let&#39;s upload our sample application code to our repository.
Switch back to your Cloud9 environoment and open a terminal tab.
cd ~/environment/ git clone https://git-codecommit.${AWS_REGION}.amazonaws.com/v1/repos/serverless-repo rsync -a --exclude=&amp;#39;.*&amp;#39; nodejs-sam-backend-demo/ serverless-repo/ cd serverless-repo/ Upload the code to the AWS CodeCommit Repository.
git add . git commit -m &amp;#34;Initial Commit&amp;#34; git push If you are prompted to enter an username and password, enter the ones in the credentials we generated in the previous step.</description>
    </item>
    
    <item>
      <title>Create a S3 Bucket for Build Artifacts</title>
      <link>/en/040_pipeline/create-s3-bucket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/create-s3-bucket/</guid>
      <description>AWS CodeBuild and AWS CodePipeline require a S3 bucket to store artifacts that are generated during build stages.
aws s3 mb s3://aws-serverless-catalog-wksp-build-&amp;lt;FIRSTNAME-LASTNAME&amp;gt; </description>
    </item>
    
    <item>
      <title>Multi-Environment Pipeline Setup</title>
      <link>/en/040_pipeline/create-pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/create-pipeline/</guid>
      <description>Open your AWS CodePipeline console.
 Click Create pipeline Name it serverless-pipeline Select Existing service role Browse for service-catalog-wksp-pipeline-role, click Next   Select AWS CodeCommit as Source provider Select serverless-repo as Repository name Select master as Branch name Leave the last option as default and click Next   Select AWS CodeBuild as Build provider Select your current region Click Create project to configure your CodeBuild project. A pop-up will open.</description>
    </item>
    
    <item>
      <title>Configure Additional Build Actions</title>
      <link>/en/040_pipeline/create-build-actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/create-build-actions/</guid>
      <description>Open your recently created pipeline.
 Click Edit   In the Build section click Edit stage Click Add action group below the current Build action to configure a new AWS CodeBuild action.   Name it Unit Test Select AWS CodeBuild as Build provider Select your current region Select SourceArtifact as Input artifacts Click Create project to configure your CodeBuild project. A pop-up will open.   Name it serverless-test-project In the Environment section select Managed image as Environment image Select Amazon Linux 2 as Operating system Select Standard as Runtime(s) Select aws/codebuild/amazonlinux2-x86-64-standard:2.</description>
    </item>
    
    <item>
      <title>Configure Deploy Actions</title>
      <link>/en/040_pipeline/create-deploy-actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/create-deploy-actions/</guid>
      <description>Adding a Development Deployment Stage  Click Add stage below the Build section we just edited.   Name it Dev, click Add stage Click Add action group Name it CreateChangeSet, click Add stage Select AWS CloudFormation as Action provider Select your current region Select BuildArtifact as Input artifacts Select Create or replace a change set as Action mode Type serverless-service-Dev as Stack name Type serverless-service-ChangeSet-Dev as Change set name Select BuildArtifact as Artifact name Select packaged.</description>
    </item>
    
    <item>
      <title>Trigger New Release</title>
      <link>/en/040_pipeline/trigger-new-release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/trigger-new-release/</guid>
      <description>Update Our Application So far we have walked through setting up a multi-environment CI/CD for our serverless application using AWS CodePipeline and now we are going to make a change to the AWS CodeCommit repository so that we can see a new release built and delivered.
Open your Cloud9 environment and go to your serverless-repo directory.
Navigate to /src/items/get-all-items/index.js file. Change the the code in this line:
const response = { statusCode: 200, body: JSON.</description>
    </item>
    
    <item>
      <title>Cleanup</title>
      <link>/en/040_pipeline/cleanup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/040_pipeline/cleanup/</guid>
      <description>Delete the stacks for each environment created for our application aws cloudformation delete-stack --stack-name serverless-service-Dev aws cloudformation delete-stack --stack-name serverless-service-Prod Delete the code repository aws codecommit delete-repository --repository-name serverless-repo Delete the build projects aws codebuild delete-project --name serverless-build-project aws codebuild delete-project --name serverless-test-project Delete the pipeline aws codepipeline delete-pipeline --name serverless-pipeline Empty and delete the S3 bucket for build artifacts aws s3 rm s3://aws-serverless-catalog-wksp-build-&amp;lt;FIRSTNAME-LASTNAME&amp;gt; --recursive aws s3 rb s3://aws-serverless-catalog-wksp-build-&amp;lt;FIRSTNAME-LASTNAME&amp;gt; --force </description>
    </item>
    
  </channel>
</rss>